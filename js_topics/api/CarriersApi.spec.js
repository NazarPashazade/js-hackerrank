/*
 * Carriers V2
 * Documentation for Carriers web apis
 *
 * OpenAPI spec version: Carriers V2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CarriersV2);
  }
}(this, function(expect, CarriersV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CarriersV2.CarriersApi();
  });

  describe('(package)', function() {
    describe('CarriersApi', function() {
      describe('apiV2AddDeclarationPost', function() {
        it('should call apiV2AddDeclarationPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV2AddDeclarationPost call and complete the assertions
          /*
          var opts = {};

          instance.apiV2AddDeclarationPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CarriersV2.BaseResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV2CarriersAddtoboxesPost', function() {
        it('should call apiV2CarriersAddtoboxesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV2CarriersAddtoboxesPost call and complete the assertions
          /*
          var opts = {};

          instance.apiV2CarriersAddtoboxesPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CarriersV2.BaseResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV2CarriersAirwaybilloperationsAirwaybillGet', function() {
        it('should call apiV2CarriersAirwaybilloperationsAirwaybillGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV2CarriersAirwaybilloperationsAirwaybillGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV2CarriersAirwaybilloperationsAirwaybillGet(airwaybill, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CarriersV2.AirwaybillOperations);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV2CarriersAirwaybillpackagesPost', function() {
        it('should call apiV2CarriersAirwaybillpackagesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV2CarriersAirwaybillpackagesPost call and complete the assertions
          /*
          var opts = {};

          instance.apiV2CarriersAirwaybillpackagesPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CarriersV2.CarriersDepeshInfo);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV2CarriersApprovesearchPost', function() {
        it('should call apiV2CarriersApprovesearchPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV2CarriersApprovesearchPost call and complete the assertions
          /*
          var opts = {};

          instance.apiV2CarriersApprovesearchPost(dataType, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CarriersV2.BaseResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV2CarriersCanceladdtoboxesPost', function() {
        it('should call apiV2CarriersCanceladdtoboxesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV2CarriersCanceladdtoboxesPost call and complete the assertions
          /*
          var opts = {};

          instance.apiV2CarriersCanceladdtoboxesPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CarriersV2.BaseResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV2CarriersCanceldepeshPost', function() {
        it('should call apiV2CarriersCanceldepeshPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV2CarriersCanceldepeshPost call and complete the assertions
          /*
          var opts = {};

          instance.apiV2CarriersCanceldepeshPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CarriersV2.BaseResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV2CarriersCarrierspostsOffsetLimitPost', function() {
        it('should call apiV2CarriersCarrierspostsOffsetLimitPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV2CarriersCarrierspostsOffsetLimitPost call and complete the assertions
          /*
          var opts = {};

          instance.apiV2CarriersCarrierspostsOffsetLimitPost(offset, limit, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CarriersV2.CarriersFullData);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV2CarriersCommercialPost', function() {
        it('should call apiV2CarriersCommercialPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV2CarriersCommercialPost call and complete the assertions
          /*
          var opts = {};

          instance.apiV2CarriersCommercialPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CarriersV2.BaseResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV2CarriersDeclarationsOffsetLimitPost', function() {
        it('should call apiV2CarriersDeclarationsOffsetLimitPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV2CarriersDeclarationsOffsetLimitPost call and complete the assertions
          /*
          var opts = {};

          instance.apiV2CarriersDeclarationsOffsetLimitPost(offset, limit, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CarriersV2.ECommerceDeclarationInfoForCarriers);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV2CarriersDeleteddeclarationsOffsetLimitPost', function() {
        it('should call apiV2CarriersDeleteddeclarationsOffsetLimitPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV2CarriersDeleteddeclarationsOffsetLimitPost call and complete the assertions
          /*
          var opts = {};

          instance.apiV2CarriersDeleteddeclarationsOffsetLimitPost(offset, limit, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CarriersV2.ECommerceMainInfo);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV2CarriersDepeshPost', function() {
        it('should call apiV2CarriersDepeshPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV2CarriersDepeshPost call and complete the assertions
          /*
          var opts = {};

          instance.apiV2CarriersDepeshPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CarriersV2.BaseResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV2CarriersGoodsgroupslistGet', function() {
        it('should call apiV2CarriersGoodsgroupslistGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV2CarriersGoodsgroupslistGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV2CarriersGoodsgroupslistGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CarriersV2.ECommerceGoodsGroupsList);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV2CarriersPingGet', function() {
        it('should call apiV2CarriersPingGet successfully', function(done) {
          // TODO: uncomment apiV2CarriersPingGet call and complete the assertions
          /*

          instance.apiV2CarriersPingGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CarriersV2.IActionResult);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV2CarriersPost', function() {
        it('should call apiV2CarriersPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV2CarriersPost call and complete the assertions
          /*
          var opts = {};

          instance.apiV2CarriersPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CarriersV2.BaseResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV2CarriersPut', function() {
        it('should call apiV2CarriersPut successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV2CarriersPut call and complete the assertions
          /*
          var opts = {};

          instance.apiV2CarriersPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CarriersV2.BaseResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV2CarriersTrackingIdDelete', function() {
        it('should call apiV2CarriersTrackingIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV2CarriersTrackingIdDelete call and complete the assertions
          /*
          var opts = {};

          instance.apiV2CarriersTrackingIdDelete(trackingId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CarriersV2.BaseResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV2DeleteDeclarationDeclarationNoDocNoPost', function() {
        it('should call apiV2DeleteDeclarationDeclarationNoDocNoPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV2DeleteDeclarationDeclarationNoDocNoPost call and complete the assertions
          /*
          var opts = {};

          instance.apiV2DeleteDeclarationDeclarationNoDocNoPost(declarationNo, docNo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CarriersV2.BaseResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
