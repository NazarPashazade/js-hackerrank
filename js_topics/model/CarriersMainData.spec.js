/*
 * Carriers V2
 * Documentation for Carriers web apis
 *
 * OpenAPI spec version: Carriers V2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CarriersV2);
  }
}(this, function(expect, CarriersV2) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CarriersMainData', function() {
      beforeEach(function() {
        instance = new CarriersV2.CarriersMainData();
      });

      it('should create an instance of CarriersMainData', function() {
        // TODO: update the code to test CarriersMainData
        expect(instance).to.be.a(CarriersV2.CarriersMainData);
      });

      it('should have the property direction (base name: "direction")', function() {
        // TODO: update the code to test the property direction
        expect(instance).to.have.property('direction');
        // expect(instance.direction).to.be(expectedValueLiteral);
      });

      it('should have the property trackinGNO (base name: "trackinG_NO")', function() {
        // TODO: update the code to test the property trackinGNO
        expect(instance).to.have.property('trackinGNO');
        // expect(instance.trackinGNO).to.be(expectedValueLiteral);
      });

      it('should have the property transPCOSTS (base name: "transP_COSTS")', function() {
        // TODO: update the code to test the property transPCOSTS
        expect(instance).to.have.property('transPCOSTS');
        // expect(instance.transPCOSTS).to.be(expectedValueLiteral);
      });

      it('should have the property weighTGOODS (base name: "weighT_GOODS")', function() {
        // TODO: update the code to test the property weighTGOODS
        expect(instance).to.have.property('weighTGOODS');
        // expect(instance.weighTGOODS).to.be(expectedValueLiteral);
      });

      it('should have the property quantitYOFGOODS (base name: "quantitY_OF_GOODS")', function() {
        // TODO: update the code to test the property quantitYOFGOODS
        expect(instance).to.have.property('quantitYOFGOODS');
        // expect(instance.quantitYOFGOODS).to.be(expectedValueLiteral);
      });

      it('should have the property invoySPRICE (base name: "invoyS_PRICE")', function() {
        // TODO: update the code to test the property invoySPRICE
        expect(instance).to.have.property('invoySPRICE');
        // expect(instance.invoySPRICE).to.be(expectedValueLiteral);
      });

      it('should have the property currencYTYPE (base name: "currencY_TYPE")', function() {
        // TODO: update the code to test the property currencYTYPE
        expect(instance).to.have.property('currencYTYPE');
        // expect(instance.currencYTYPE).to.be(expectedValueLiteral);
      });

      it('should have the property documenTTYPE (base name: "documenT_TYPE")', function() {
        // TODO: update the code to test the property documenTTYPE
        expect(instance).to.have.property('documenTTYPE');
        // expect(instance.documenTTYPE).to.be(expectedValueLiteral);
      });

      it('should have the property fin (base name: "fin")', function() {
        // TODO: update the code to test the property fin
        expect(instance).to.have.property('fin');
        // expect(instance.fin).to.be(expectedValueLiteral);
      });

      it('should have the property idxaLNAME (base name: "idxaL_NAME")', function() {
        // TODO: update the code to test the property idxaLNAME
        expect(instance).to.have.property('idxaLNAME');
        // expect(instance.idxaLNAME).to.be(expectedValueLiteral);
      });

      it('should have the property idxaLADRESS (base name: "idxaL_ADRESS")', function() {
        // TODO: update the code to test the property idxaLADRESS
        expect(instance).to.have.property('idxaLADRESS');
        // expect(instance.idxaLADRESS).to.be(expectedValueLiteral);
      });

      it('should have the property phone (base name: "phone")', function() {
        // TODO: update the code to test the property phone
        expect(instance).to.have.property('phone');
        // expect(instance.phone).to.be(expectedValueLiteral);
      });

      it('should have the property ixraCNAME (base name: "ixraC_NAME")', function() {
        // TODO: update the code to test the property ixraCNAME
        expect(instance).to.have.property('ixraCNAME');
        // expect(instance.ixraCNAME).to.be(expectedValueLiteral);
      });

      it('should have the property ixraCADRESS (base name: "ixraC_ADRESS")', function() {
        // TODO: update the code to test the property ixraCADRESS
        expect(instance).to.have.property('ixraCADRESS');
        // expect(instance.ixraCADRESS).to.be(expectedValueLiteral);
      });

      it('should have the property goodSTRAFFICFR (base name: "goodS_TRAFFIC_FR")', function() {
        // TODO: update the code to test the property goodSTRAFFICFR
        expect(instance).to.have.property('goodSTRAFFICFR');
        // expect(instance.goodSTRAFFICFR).to.be(expectedValueLiteral);
      });

      it('should have the property goodSTRAFFICTO (base name: "goodS_TRAFFIC_TO")', function() {
        // TODO: update the code to test the property goodSTRAFFICTO
        expect(instance).to.have.property('goodSTRAFFICTO');
        // expect(instance.goodSTRAFFICTO).to.be(expectedValueLiteral);
      });

      it('should have the property goodsList (base name: "goodsList")', function() {
        // TODO: update the code to test the property goodsList
        expect(instance).to.have.property('goodsList');
        // expect(instance.goodsList).to.be(expectedValueLiteral);
      });

    });
  });

}));
