/*
 * Carriers V2
 * Documentation for Carriers web apis
 *
 * OpenAPI spec version: Carriers V2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CarriersV2);
  }
}(this, function(expect, CarriersV2) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PersonalInfo', function() {
      beforeEach(function() {
        instance = new CarriersV2.PersonalInfo();
      });

      it('should create an instance of PersonalInfo', function() {
        // TODO: update the code to test PersonalInfo
        expect(instance).to.be.a(CarriersV2.PersonalInfo);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property surname (base name: "surname")', function() {
        // TODO: update the code to test the property surname
        expect(instance).to.have.property('surname');
        // expect(instance.surname).to.be(expectedValueLiteral);
      });

      it('should have the property fatherName (base name: "fatherName")', function() {
        // TODO: update the code to test the property fatherName
        expect(instance).to.have.property('fatherName');
        // expect(instance.fatherName).to.be(expectedValueLiteral);
      });

      it('should have the property nationality (base name: "nationality")', function() {
        // TODO: update the code to test the property nationality
        expect(instance).to.have.property('nationality');
        // expect(instance.nationality).to.be(expectedValueLiteral);
      });

      it('should have the property nationalityName (base name: "nationalityName")', function() {
        // TODO: update the code to test the property nationalityName
        expect(instance).to.have.property('nationalityName');
        // expect(instance.nationalityName).to.be(expectedValueLiteral);
      });

      it('should have the property docNo (base name: "docNo")', function() {
        // TODO: update the code to test the property docNo
        expect(instance).to.have.property('docNo');
        // expect(instance.docNo).to.be(expectedValueLiteral);
      });

      it('should have the property birthDate (base name: "birthDate")', function() {
        // TODO: update the code to test the property birthDate
        expect(instance).to.have.property('birthDate');
        // expect(instance.birthDate).to.be(expectedValueLiteral);
      });

      it('should have the property phoneNumber (base name: "phoneNumber")', function() {
        // TODO: update the code to test the property phoneNumber
        expect(instance).to.have.property('phoneNumber');
        // expect(instance.phoneNumber).to.be(expectedValueLiteral);
      });

      it('should have the property passportNo (base name: "passportNo")', function() {
        // TODO: update the code to test the property passportNo
        expect(instance).to.have.property('passportNo');
        // expect(instance.passportNo).to.be(expectedValueLiteral);
      });

    });
  });

}));
